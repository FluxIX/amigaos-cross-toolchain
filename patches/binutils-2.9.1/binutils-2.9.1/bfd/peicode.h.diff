--- binutils-2.9.1/bfd/peicode.h	Fri May  1 08:48:14 1998
+++ binutils-2.9.1/bfd/peicode.h	Sun Aug 23 00:00:00 1998
@@ -494,11 +494,17 @@ coff_swap_sym_in (abfd, ext1, in1)
      documentation indicates is a section symbol.  The problem is that the
      value field in the symbol is simply a copy of the .idata section's flags
      rather than something useful.  When these symbols are encountered, change
-     the value to 0 and the section number to 1 so that they will be handled
-     somewhat correctly in the bfd code. */
-  if (in->n_sclass == 0x68) {
+     the value to 0 so that they will be handled somewhat correctly in the 
+     bfd code. */
+  if (in->n_sclass == C_SECTION) {
     in->n_value = 0x0;
-    in->n_scnum = 1;
+    if(strcmp (in->_n._n_name, ".idata$2") == 0)
+      in->n_sclass = 1; /* not used for anything that I know of. */
+/* can't hash more than 1 sub-section symbol with the same name. */
+    if(strcmp (in->_n._n_name, ".idata$4") == 0)
+      sprintf(in->_n._n_name, "i4%x",((int)abfd & ~0xff000000));
+    if(strcmp (in->_n._n_name, ".idata$5") == 0)
+      sprintf(in->_n._n_name, "i5%x",((int)abfd & ~0xff000000));
     /* I have tried setting the class to 3 and using the following to set
        the section number.  This will put the address of the pointer to the
        string kernel32.dll at addresses 0 and 0x10 off start of idata section
@@ -1394,14 +1400,14 @@ pe_print_idata(abfd, vfile)
 	  fprintf (file, "\tvma:  Hint/Ord Member-Name\n");
 
 	  idx = hint_addr + adj;
-
+#define IMPORTED_BY_ORDINAL 0x80000000 /* FIXME should be in a REAL header */
 	  for (j = 0; j < stop; j += 4)
 	    {
 	      unsigned long member = bfd_get_32 (abfd, data + idx + j);
 
 	      if (member == 0)
 		break;
-	      if (member & 0x80000000)
+	      if (member & IMPORTED_BY_ORDINAL)
 		fprintf (file, "\t%04lx\t %4lu", member,
 			 member & 0x7fffffff);
 	      else
@@ -1464,10 +1470,19 @@ pe_print_idata(abfd, vfile)
 		    }
 		  else 
 		    {
+		      if (!(iat_member & IMPORTED_BY_ORDINAL))
+                        {
 		      ordinal = bfd_get_16(abfd,
 					   data + iat_member + adj);
 		      member_name = (char *) data + iat_member + adj + 2;
-		      fprintf(file, "\t%04lx\t %4d  %s\n",
+                        }
+                      else
+			{              
+			  ordinal = (iat_member & 0x0000ffff);
+			  iat_member = first_thunk + j;
+              		  member_name = (char *)"Imported By Ordinal";
+			}
+		      fprintf(file, "\t%04lx\t %4x  %s\n",
 			      iat_member, ordinal, member_name);
 		    }
 		}
