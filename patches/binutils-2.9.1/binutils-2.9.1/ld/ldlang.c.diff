--- binutils-2.9.1/ld/ldlang.c	Fri May  1 08:48:49 1998
+++ binutils-2.9.1/ld/ldlang.c	Sun Aug 23 00:00:00 1998
@@ -745,12 +745,32 @@ section_already_linked (abfd, sec, data)
 
   if ((flags & SEC_LINK_ONCE) == 0)
     return;
-
+  pei_get_comdat_info(sec);
   name = bfd_get_section_name (abfd, sec);
+  if (sec->pe_comdat_info != NULL)
+    {
+      if (sec->pe_comdat_info && sec->pe_comdat_info->asoc_sec != (int)NULL)
+	{
+	  /* .idata$2 & .idata$3 are not marked SEC_LINK_ONCE in MS .lib's
+	     assuming that any SEC_LINK_ONCE section that dosen't have a
+	     comdat symbol is an associated section and that the 
+	     section with the symbol has already been processed */
+	  for (l = sec_link_once_list; l != NULL; l = l->next)
+	    {
+	      if ((abfd == l->sec->owner) && (sec->pe_comdat_info->asoc_sec == l->sec->index + 1))
+		return;
+	    }
+	  sec->output_section = bfd_abs_section_ptr;
+	  return;
+	}
+    }
 
   for (l = sec_link_once_list; l != NULL; l = l->next)
     {
-      if (strcmp (name, bfd_get_section_name (l->sec->owner, l->sec)) == 0)
+     if ((strcmp (name, bfd_get_section_name (l->sec->owner, l->sec)) == 0)
+	 && sec->pe_comdat_info != NULL
+	 && (strcmp (sec->pe_comdat_info->name_buf, l->sec->pe_comdat_info->name_buf) == 0)
+	 && (strcmp (sec->pe_comdat_info->comdat_sym, l->sec->pe_comdat_info->comdat_sym) == 0))
 	{
 	  /* The section has already been linked.  See if we should
              issue a warning.  */
@@ -790,7 +810,7 @@ section_already_linked (abfd, sec, data)
 	}
     }
 
-  /* This is the first section with this name.  Record it.  */
+  /* This is the first section with this name and symbol.  Record it.  */
 
   l = (struct sec_link_once *) xmalloc (sizeof *l);
   l->sec = sec;
@@ -1442,6 +1462,27 @@ ldlang_add_undef (name)
   new->name = buystring (name);
 }
 
+/* exchange an older undefined entry point for a newer one
+   this will avoid dragging in the extra .o files
+   when the entry point is in a lib file */
+void
+ldlang_switch_undef_entry (name)
+     CONST char *CONST name;
+{
+  ldlang_undef_chain_list_type *new = ldlang_undef_chain_list_head;
+  while (new != (ldlang_undef_chain_list_type *) NULL)
+  {
+  if (strcmp (new->name, entry_symbol) == 0)
+     {
+     free(new->name);
+     new->name = buystring (name);
+     }
+  new = new->next;
+  }
+
+}
+
+
 /* Run through the list of undefineds created above and place them
    into the linker hash table as undefined symbols belonging to the
    script file.
@@ -3389,17 +3430,13 @@ lang_add_entry (name, cmdline)
       || cmdline
       || ! entry_from_cmdline)
     {
+      if (entry_symbol != NULL)
+         ldlang_switch_undef_entry (name);
+      else
+         ldlang_add_undef(name);
       entry_symbol = name;
       entry_from_cmdline = cmdline;
     }
-#if 0 
-  /* don't do this yet.  It seems to work (the executables run), but the 
-     image created is very different from what I was getting before indicating
-     that something else is being pulled in.  When everything else is working,
-     then try to put this back in to see if it will do the right thing for
-     other more complicated applications */
-  ldlang_add_undef (name);
-#endif
 }
 
 void
