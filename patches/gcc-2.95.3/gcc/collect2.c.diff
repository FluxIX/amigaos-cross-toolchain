--- gcc-2.95.3/gcc/collect2.c	2001-01-25 06:03:01.000000000 -0800
+++ gcc-2.95.3/gcc/collect2.c	2011-05-08 04:56:30.285289276 -0700
@@ -157,6 +157,12 @@
 #else
 int do_collecting = 0;
 #endif
+
+/* begin-GG-local: dynamic libraries */
+#ifndef DO_COLLECTING
+#define DO_COLLECTING do_collecting
+#endif
+/* end-GG-local */
 
 /* Linked lists of constructor and destructor names.  */
 
@@ -278,8 +284,10 @@
 static void prefix_from_env	PROTO((char *, struct path_prefix *));
 static void prefix_from_string	PROTO((char *, struct path_prefix *));
 static void do_wait		PROTO((char *));
-static void fork_execute	PROTO((char *, char **));
-static void maybe_unlink	PROTO((char *));
+/* begin-GG-local: dynamic libraries */
+void fork_execute		PROTO((char *, char **));
+void maybe_unlink		PROTO((char *));
+/* end-GG-local */
 static void add_to_list		PROTO((struct head *, char *));
 static int  extract_init_priority PROTO((char *));
 static void sort_ids		PROTO((struct head *));
@@ -399,6 +407,12 @@
   if (status != 0 && output_file != 0 && output_file[0])
     maybe_unlink (output_file);
 
+/* begin-GG-local: dynamic libraries */
+#ifdef COLLECT2_EXTRA_CLEANUP
+  COLLECT2_EXTRA_CLEANUP();
+#endif
+/* end-GG-local */
+
   exit (status);
 }
 
@@ -523,6 +537,12 @@
     maybe_unlink (import_file);
 #endif
 
+/* begin-GG-local: dynamic libraries */
+#ifdef COLLECT2_EXTRA_CLEANUP
+  COLLECT2_EXTRA_CLEANUP();
+#endif
+/* end-GG-local */
+
   signal (signo, SIG_DFL);
   kill (getpid (), signo);
 }
@@ -823,11 +843,15 @@
 
   /* Determine the filename to execute (special case for absolute paths).  */
 
+#ifndef FILE_NAME_ABSOLUTE_P
   if (*name == '/'
 #ifdef HAVE_DOS_BASED_FILE_SYSTEM
       || (*name && name[1] == ':')
 #endif
       )
+#else
+  if (FILE_NAME_ABSOLUTE_P (name))
+#endif
     {
       if (access (name, X_OK) == 0)
 	{
@@ -1063,6 +1087,11 @@
       char *q = extract_string (&p);
       if (*q == '-' && (q[1] == 'm' || q[1] == 'f'))
 	num_c_args++;
+/* begin-GG-local: dynamic libraries */
+#ifdef COLLECT2_GCC_OPTIONS_HOOK
+      COLLECT2_GCC_OPTIONS_HOOK(q);
+#endif
+/* end-GG-local */
     }
   obstack_free (&temporary_obstack, temporary_firstobj);
   ++num_c_args;
@@ -1340,6 +1369,11 @@
 		add_to_list (&libs, s);
 	      }
 #endif
+/* begin-GG-local: dynamic libraries */
+#ifdef COLLECT2_LIBNAME_HOOK
+	      COLLECT2_LIBNAME_HOOK(arg);
+#endif
+/* end-GG-local */
 	      break;
 
 #ifdef COLLECT_EXPORT_LIST
@@ -1362,7 +1396,9 @@
 	      break;
 
 	    case 's':
-	      if (arg[2] == '\0' && do_collecting)
+/* begin-GG-local: dynamic libraries */
+	      if (arg[2] == '\0' && DO_COLLECTING)
+/* end-GG-local */
 		{
 		  /* We must strip after the nm run, otherwise C++ linking
 		     will not work.  Thus we strip in the second ld run, or
@@ -1413,6 +1449,11 @@
               add_to_list (&libs, arg);
             }
 #endif
+/* begin-GG-local: dynamic libraries */
+#ifdef COLLECT2_LIBNAME_HOOK
+	  COLLECT2_LIBNAME_HOOK(arg);
+#endif
+/* end-GG-local */
 	}
     }
 
@@ -1511,6 +1552,12 @@
       fprintf (stderr, "\n");
     }
 
+/* begin-GG-local: dynamic libraries */
+#ifdef COLLECT2_PRELINK_HOOK
+  COLLECT2_PRELINK_HOOK(ld1_argv, &strip_flag);
+#endif
+/* end-GG-local */
+
   /* Load the program, searching all libraries and attempting to provide
      undefined symbols from repository information.  */
 
@@ -1523,7 +1570,9 @@
      constructor or destructor list, just return now.  */
   if (rflag
 #ifndef COLLECT_EXPORT_LIST
-      || ! do_collecting
+/* begin-GG-local: dynamic libraries */
+      || ! DO_COLLECTING
+/* end-GG-local */
 #endif
       )
     {
@@ -1542,6 +1591,8 @@
       return 0;
     }
 
+/* begin-GG-local: dynamic libraries */
+#ifndef COLLECT2_POSTLINK_HOOK
   /* Examine the namelist with nm and search it for static constructors
      and destructors to call.
      Write the constructor and destructor tables to a .s file and reload.  */
@@ -1561,6 +1612,10 @@
       notice ("%d destructor(s)  found\n", destructors.number);
       notice ("%d frame table(s) found\n", frame_tables.number);
     }
+#else /* COLLECT2_POSTLINK_HOOK */
+  COLLECT2_POSTLINK_HOOK(output_file);
+#endif
+/* end-GG-local */
 
   if (constructors.number == 0 && destructors.number == 0
       && frame_tables.number == 0
@@ -1592,6 +1647,11 @@
 #endif
       maybe_unlink (c_file);
       maybe_unlink (o_file);
+/* begin-GG-local: dynamic libraries */
+#ifdef COLLECT2_EXTRA_CLEANUP
+      COLLECT2_EXTRA_CLEANUP();
+#endif
+/* end-GG-local */
       return 0;
     }
 
@@ -1671,6 +1731,11 @@
   maybe_unlink (import_file);
 #endif
 
+/* begin-GG-local: dynamic libraries */
+#ifdef COLLECT2_EXTRA_CLEANUP
+  COLLECT2_EXTRA_CLEANUP();
+#endif
+/* end-GG-local */
   return 0;
 }
 
@@ -1793,7 +1858,9 @@
    fatal_perror (errmsg_fmt, errmsg_arg);
 }
 
-static void
+/* begin-GG-local: dynamic libraries */
+void
+/* end-GG-local */
 fork_execute (prog, argv)
      char *prog;
      char **argv;
@@ -1804,7 +1871,9 @@
 
 /* Unlink a file unless we are debugging.  */
 
-static void
+/* begin-GG-local: dynamic libraries */
+void
+/* end-GG-local */
 maybe_unlink (file)
      char *file;
 {
